syntax = "proto3";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/protobuf/empty.proto";
import "google/api/annotations.proto";


package article.service.v1;

//文章列表
message ArtListRequest {
     int64 pageNum = 1;
     int32 pageSize = 2;
     string keyword = 3;
     string tags = 4;
     int32 status = 5;
     string order = 6;
     int64 createdAt = 7;
     int64 updatedAt = 8;
     bool unscoped = 9;
}

message ArtListResp {
    int64 total=1;
    repeated ArtDetailResp lists = 2;
    int64 page = 3;
    int32 size = 4;
}


//文章详情
message ArtDetailRequest {
    string sn = 1 [(gogoproto.moretags) = 'validate:"required"'];
}

message ArtDetailResp {
    int64  id      = 1;
    string sn      = 2;
    string title   = 3;
    string img     = 4 ;
    string content = 5 ;
    int32  status  = 6 ;
    int64 created_at = 7;
    int64 updated_at = 8;
    int64 deleted_at = 9;
    string tags    = 10;
    int32 ord      = 11;
    int64 view_count = 12;
    int64 cm_count = 13;
    int64 laud_count = 14;
}


//添加/修改文章
message SaveArtReq {
    int64  id      = 1;
    string sn      = 2;
    string title   = 3 [(gogoproto.moretags) = 'validate:"required"'];
    string img     = 4 ;
    string content = 5 [(gogoproto.moretags) = 'validate:"required"'];
    int32  status  = 6;
    string tags    = 7;
    int64 created_at = 8 [(gogoproto.moretags) = 'validate:"min=0"'];
    int64 updated_at = 9 [(gogoproto.moretags) = 'validate:"min=0"'];
    int64 view_count = 12;
    int64 cm_count = 13;
    int64 laud_count = 14;
}

message SaveArtResp {
    int64 status      = 1;
    string data       = 2;
    string msg        = 3;
}


//删除文章
message DelArtRequest {
    int64 id = 1 [(gogoproto.moretags) = 'validate:"required"'];
    bool   physical = 2; //是否为物理删除，false为软删除
}



service Article {
    rpc Ping(.google.protobuf.Empty) returns (.google.protobuf.Empty);

    rpc ArtList(ArtListRequest)returns(ArtListResp){
        option(google.api.http) = {
            get:"/article/pagenum/{pageNum}/pagesize/{pageSize}/keyword/{keyword}/tags/{tags}/status/{status}/order/{order}/unscoped/{unscoped}"
        };
    }
    rpc GetArtBySn(ArtDetailRequest) returns (ArtDetailResp){
        option(google.api.http) = {
            get:"/article/sn/{sn}"
        };
    };
    rpc CreateArt(SaveArtReq) returns (SaveArtResp){
        option(google.api.http) = {
            post:"/article/create"
            body:"*"
        };
    };
    rpc UpdateArt(SaveArtReq) returns (SaveArtResp){
        option(google.api.http) = {
            post:"/article/update"
            body:"*"
        };
    };
    rpc DeleteArt(DelArtRequest) returns (SaveArtResp){
        option(google.api.http) = {
            post:"/article/id/{id}/physical/{physical}"
        };
    };
}