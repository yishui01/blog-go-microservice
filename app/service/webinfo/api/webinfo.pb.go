// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: webinfo.proto

package webinfo_service_v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//信息列表
type InfoReq struct {
	PageNum              int64    `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty" form:"pageNum" validate:"numeric,min=1"`
	PageSize             int32    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty" form:"pageSize" validate:"numeric,min=1"`
	Filter               string   `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty" form:"filter"`
	Order                string   `protobuf:"bytes,4,opt,name=order,proto3" json:"order,omitempty" form:"order"`
	Unscoped             bool     `protobuf:"varint,5,opt,name=unscoped,proto3" json:"unscoped,omitempty" form:"unscoped"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoReq) Reset()         { *m = InfoReq{} }
func (m *InfoReq) String() string { return proto.CompactTextString(m) }
func (*InfoReq) ProtoMessage()    {}
func (*InfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbfb2e4482474456, []int{0}
}
func (m *InfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoReq.Merge(m, src)
}
func (m *InfoReq) XXX_Size() int {
	return m.Size()
}
func (m *InfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_InfoReq proto.InternalMessageInfo

func (m *InfoReq) GetPageNum() int64 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *InfoReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *InfoReq) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

func (m *InfoReq) GetOrder() string {
	if m != nil {
		return m.Order
	}
	return ""
}

func (m *InfoReq) GetUnscoped() bool {
	if m != nil {
		return m.Unscoped
	}
	return false
}

type InfoResp struct {
	Total                int64         `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Lists                []*InfoDetail `protobuf:"bytes,2,rep,name=lists,proto3" json:"lists,omitempty"`
	Page                 int64         `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size_                int32         `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *InfoResp) Reset()         { *m = InfoResp{} }
func (m *InfoResp) String() string { return proto.CompactTextString(m) }
func (*InfoResp) ProtoMessage()    {}
func (*InfoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbfb2e4482474456, []int{1}
}
func (m *InfoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoResp.Merge(m, src)
}
func (m *InfoResp) XXX_Size() int {
	return m.Size()
}
func (m *InfoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoResp.DiscardUnknown(m)
}

var xxx_messageInfo_InfoResp proto.InternalMessageInfo

func (m *InfoResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *InfoResp) GetLists() []*InfoDetail {
	if m != nil {
		return m.Lists
	}
	return nil
}

func (m *InfoResp) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *InfoResp) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

//信息详情
type InfoDetail struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id"`
	Sn                   string   `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn"`
	WebKey               string   `protobuf:"bytes,3,opt,name=web_key,json=webKey,proto3" json:"web_key"`
	UniqueVal            string   `protobuf:"bytes,4,opt,name=unique_val,json=uniqueVal,proto3" json:"unique_val"`
	WebVal               string   `protobuf:"bytes,5,opt,name=web_val,json=webVal,proto3" json:"web_val"`
	Status               int32    `protobuf:"varint,6,opt,name=status,proto3" json:"status"`
	CreatedAt            int64    `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at"`
	UpdatedAt            int64    `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at"`
	DeletedAt            int64    `protobuf:"varint,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at"`
	Ord                  string   `protobuf:"bytes,11,opt,name=ord,proto3" json:"ord"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InfoDetail) Reset()         { *m = InfoDetail{} }
func (m *InfoDetail) String() string { return proto.CompactTextString(m) }
func (*InfoDetail) ProtoMessage()    {}
func (*InfoDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbfb2e4482474456, []int{2}
}
func (m *InfoDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InfoDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InfoDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InfoDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InfoDetail.Merge(m, src)
}
func (m *InfoDetail) XXX_Size() int {
	return m.Size()
}
func (m *InfoDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_InfoDetail.DiscardUnknown(m)
}

var xxx_messageInfo_InfoDetail proto.InternalMessageInfo

func (m *InfoDetail) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *InfoDetail) GetSn() string {
	if m != nil {
		return m.Sn
	}
	return ""
}

func (m *InfoDetail) GetWebKey() string {
	if m != nil {
		return m.WebKey
	}
	return ""
}

func (m *InfoDetail) GetUniqueVal() string {
	if m != nil {
		return m.UniqueVal
	}
	return ""
}

func (m *InfoDetail) GetWebVal() string {
	if m != nil {
		return m.WebVal
	}
	return ""
}

func (m *InfoDetail) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *InfoDetail) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *InfoDetail) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *InfoDetail) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func (m *InfoDetail) GetOrd() string {
	if m != nil {
		return m.Ord
	}
	return ""
}

//添加/修改信息
type SaveInfoReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Sn                   string   `protobuf:"bytes,2,opt,name=sn,proto3" json:"sn,omitempty"`
	WebKey               string   `protobuf:"bytes,3,opt,name=web_key,json=webKey,proto3" json:"web_key,omitempty" validate:"required"`
	UniqueVal            string   `protobuf:"bytes,4,opt,name=unique_val,json=uniqueVal,proto3" json:"unique_val,omitempty" validate:"required"`
	WebVal               string   `protobuf:"bytes,5,opt,name=web_val,json=webVal,proto3" json:"web_val,omitempty" validate:"required"`
	Status               int32    `protobuf:"varint,6,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt            int64    `protobuf:"varint,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" validate:"min=0"`
	UpdatedAt            int64    `protobuf:"varint,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" validate:"min=0"`
	DeletedAt            int64    `protobuf:"varint,9,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty"`
	Ord                  string   `protobuf:"bytes,11,opt,name=ord,proto3" json:"ord,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveInfoReq) Reset()         { *m = SaveInfoReq{} }
func (m *SaveInfoReq) String() string { return proto.CompactTextString(m) }
func (*SaveInfoReq) ProtoMessage()    {}
func (*SaveInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbfb2e4482474456, []int{3}
}
func (m *SaveInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveInfoReq.Merge(m, src)
}
func (m *SaveInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *SaveInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_SaveInfoReq proto.InternalMessageInfo

func (m *SaveInfoReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SaveInfoReq) GetSn() string {
	if m != nil {
		return m.Sn
	}
	return ""
}

func (m *SaveInfoReq) GetWebKey() string {
	if m != nil {
		return m.WebKey
	}
	return ""
}

func (m *SaveInfoReq) GetUniqueVal() string {
	if m != nil {
		return m.UniqueVal
	}
	return ""
}

func (m *SaveInfoReq) GetWebVal() string {
	if m != nil {
		return m.WebVal
	}
	return ""
}

func (m *SaveInfoReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SaveInfoReq) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *SaveInfoReq) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *SaveInfoReq) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func (m *SaveInfoReq) GetOrd() string {
	if m != nil {
		return m.Ord
	}
	return ""
}

//公共save/delete 响应
type SaveResp struct {
	Status               int32    `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Data                 string   `protobuf:"bytes,2,opt,name=data,proto3" json:"data,omitempty"`
	Msg                  string   `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SaveResp) Reset()         { *m = SaveResp{} }
func (m *SaveResp) String() string { return proto.CompactTextString(m) }
func (*SaveResp) ProtoMessage()    {}
func (*SaveResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbfb2e4482474456, []int{4}
}
func (m *SaveResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SaveResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SaveResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SaveResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SaveResp.Merge(m, src)
}
func (m *SaveResp) XXX_Size() int {
	return m.Size()
}
func (m *SaveResp) XXX_DiscardUnknown() {
	xxx_messageInfo_SaveResp.DiscardUnknown(m)
}

var xxx_messageInfo_SaveResp proto.InternalMessageInfo

func (m *SaveResp) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *SaveResp) GetData() string {
	if m != nil {
		return m.Data
	}
	return ""
}

func (m *SaveResp) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

//删除记录
type DelInfoReq struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" form:"id" validate:"required"`
	Physical             bool     `protobuf:"varint,2,opt,name=physical,proto3" json:"physical,omitempty" form:"physical"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DelInfoReq) Reset()         { *m = DelInfoReq{} }
func (m *DelInfoReq) String() string { return proto.CompactTextString(m) }
func (*DelInfoReq) ProtoMessage()    {}
func (*DelInfoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbfb2e4482474456, []int{5}
}
func (m *DelInfoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelInfoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelInfoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelInfoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelInfoReq.Merge(m, src)
}
func (m *DelInfoReq) XXX_Size() int {
	return m.Size()
}
func (m *DelInfoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_DelInfoReq.DiscardUnknown(m)
}

var xxx_messageInfo_DelInfoReq proto.InternalMessageInfo

func (m *DelInfoReq) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DelInfoReq) GetPhysical() bool {
	if m != nil {
		return m.Physical
	}
	return false
}

func init() {
	proto.RegisterType((*InfoReq)(nil), "webinfo.service.v1.InfoReq")
	proto.RegisterType((*InfoResp)(nil), "webinfo.service.v1.InfoResp")
	proto.RegisterType((*InfoDetail)(nil), "webinfo.service.v1.InfoDetail")
	proto.RegisterType((*SaveInfoReq)(nil), "webinfo.service.v1.SaveInfoReq")
	proto.RegisterType((*SaveResp)(nil), "webinfo.service.v1.SaveResp")
	proto.RegisterType((*DelInfoReq)(nil), "webinfo.service.v1.DelInfoReq")
}

func init() { proto.RegisterFile("webinfo.proto", fileDescriptor_dbfb2e4482474456) }

var fileDescriptor_dbfb2e4482474456 = []byte{
	// 947 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0x4f, 0x6f, 0x1b, 0x45,
	0x14, 0x67, 0xd7, 0xf1, 0xbf, 0x09, 0x4d, 0xc3, 0x34, 0x0a, 0x8b, 0xdb, 0x7a, 0xcd, 0x08, 0x81,
	0xa1, 0x8d, 0x27, 0x69, 0x50, 0x0f, 0x91, 0x38, 0xd4, 0xb4, 0x52, 0x11, 0x08, 0xa1, 0xa9, 0x80,
	0x63, 0x18, 0x7b, 0xc7, 0x9b, 0x11, 0xeb, 0xdd, 0xcd, 0xee, 0xac, 0xa3, 0x60, 0x19, 0x24, 0xf8,
	0x08, 0x5c, 0x38, 0xf1, 0x15, 0xf8, 0x16, 0x88, 0x23, 0x12, 0xf7, 0x15, 0x0a, 0x9c, 0x7c, 0xf4,
	0x99, 0x03, 0x9a, 0x3f, 0xeb, 0x75, 0x5a, 0xbb, 0x9c, 0xb8, 0xec, 0xbe, 0x79, 0xef, 0x37, 0xef,
	0xcd, 0xbc, 0xdf, 0x9b, 0x1f, 0xb8, 0x71, 0xc1, 0x06, 0x3c, 0x1c, 0x45, 0xbd, 0x38, 0x89, 0x44,
	0x04, 0x61, 0xb1, 0x4c, 0x59, 0x32, 0xe1, 0x43, 0xd6, 0x9b, 0x1c, 0xb5, 0x0e, 0x7c, 0x2e, 0xce,
	0xb2, 0x41, 0x6f, 0x18, 0x8d, 0xb1, 0x1f, 0xf9, 0x11, 0x56, 0xd0, 0x41, 0x36, 0x52, 0x2b, 0xb5,
	0x50, 0x96, 0x4e, 0xd1, 0xba, 0xed, 0x47, 0x91, 0x1f, 0xb0, 0x12, 0xc5, 0xc6, 0xb1, 0xb8, 0x34,
	0xc1, 0x3b, 0x26, 0x48, 0x63, 0x8e, 0x69, 0x18, 0x46, 0x82, 0x0a, 0x1e, 0x85, 0xa9, 0x8e, 0xa2,
	0x9f, 0x6d, 0x50, 0xff, 0x28, 0x1c, 0x45, 0x84, 0x9d, 0xc3, 0x27, 0xa0, 0x1e, 0x53, 0x9f, 0x7d,
	0x9a, 0x8d, 0x1d, 0xab, 0x63, 0x75, 0x2b, 0xfd, 0x7b, 0x8b, 0xdc, 0x7d, 0x67, 0x14, 0x25, 0xe3,
	0x13, 0x64, 0x02, 0xa8, 0x33, 0xa1, 0x01, 0xf7, 0xa8, 0x60, 0x27, 0x28, 0xcc, 0xc6, 0x2c, 0xe1,
	0xc3, 0xfb, 0x63, 0x1e, 0x7e, 0x70, 0x84, 0x48, 0xb1, 0x17, 0x3e, 0x05, 0x0d, 0x69, 0x3e, 0xe3,
	0xdf, 0x30, 0xc7, 0xee, 0x58, 0xdd, 0x6a, 0xff, 0xfe, 0x22, 0x77, 0xbb, 0x65, 0x1e, 0x19, 0x79,
	0x49, 0xa2, 0xe5, 0x6e, 0xf8, 0x2e, 0xa8, 0x8d, 0x78, 0x20, 0x58, 0xe2, 0x54, 0x3a, 0x56, 0xb7,
	0xd9, 0x7f, 0x6d, 0x91, 0xbb, 0x37, 0x74, 0x1e, 0xed, 0x47, 0xc4, 0x00, 0xe0, 0xdb, 0xa0, 0x1a,
	0x25, 0x1e, 0x4b, 0x9c, 0x2d, 0x85, 0xdc, 0x5d, 0xe4, 0xee, 0xab, 0x1a, 0xa9, 0xdc, 0x88, 0xe8,
	0x30, 0xc4, 0xa0, 0x91, 0x85, 0xe9, 0x30, 0x8a, 0x99, 0xe7, 0x54, 0x3b, 0x56, 0xb7, 0xd1, 0xbf,
	0xb5, 0xc8, 0xdd, 0x9b, 0x1a, 0x5a, 0x44, 0x10, 0x59, 0x82, 0xd0, 0xb7, 0xa0, 0xa1, 0xfb, 0x93,
	0xc6, 0x70, 0x0f, 0x54, 0x45, 0x24, 0x68, 0xa0, 0xdb, 0x43, 0xf4, 0x02, 0xbe, 0x0f, 0xaa, 0x01,
	0x4f, 0x45, 0xea, 0xd8, 0x9d, 0x4a, 0x77, 0xfb, 0x41, 0xbb, 0xf7, 0x22, 0xa1, 0x3d, 0x99, 0xe2,
	0x31, 0x13, 0x94, 0x07, 0x44, 0x83, 0x21, 0x04, 0x5b, 0xf2, 0x9e, 0xea, 0x66, 0x15, 0xa2, 0x6c,
	0xe9, 0x4b, 0x65, 0xd7, 0xe4, 0x1d, 0xaa, 0x44, 0xd9, 0xe8, 0x87, 0x0a, 0x00, 0xe5, 0x6e, 0xb8,
	0x0f, 0x6c, 0xee, 0x19, 0x7a, 0x6a, 0xf3, 0xdc, 0xb5, 0xb9, 0x47, 0x6c, 0xee, 0x49, 0x7f, 0x1a,
	0xaa, 0x76, 0x37, 0xb5, 0x3f, 0x0d, 0x89, 0x9d, 0x86, 0xf0, 0x2d, 0x50, 0xbf, 0x60, 0x83, 0xd3,
	0xaf, 0xd9, 0xa5, 0xe9, 0xe1, 0xf6, 0x3c, 0x77, 0x0b, 0x17, 0xa9, 0x5d, 0xb0, 0xc1, 0xc7, 0xec,
	0x12, 0x1e, 0x00, 0x90, 0x85, 0xfc, 0x3c, 0x63, 0xa7, 0x13, 0x1a, 0x98, 0x16, 0xee, 0xcc, 0x73,
	0x77, 0xc5, 0x4b, 0x9a, 0xda, 0xfe, 0x82, 0x06, 0x45, 0x52, 0x89, 0xad, 0x5e, 0x4f, 0x2a, 0x81,
	0x32, 0xa9, 0x44, 0x21, 0x50, 0x4b, 0x05, 0x15, 0x59, 0xea, 0xd4, 0xd4, 0x14, 0x80, 0x79, 0xee,
	0x1a, 0x0f, 0x31, 0x7f, 0x59, 0x78, 0x98, 0x30, 0x2a, 0x98, 0x77, 0x4a, 0x85, 0x53, 0x57, 0xd7,
	0x52, 0x85, 0x4b, 0x2f, 0x69, 0x1a, 0xfb, 0x91, 0x50, 0xe7, 0x8c, 0xbd, 0x02, 0xde, 0x28, 0xe1,
	0xa5, 0x97, 0x34, 0x8d, 0xad, 0xe1, 0x1e, 0x0b, 0x98, 0x81, 0x37, 0x4b, 0x78, 0xe9, 0x25, 0x4d,
	0x63, 0x3f, 0x12, 0xf0, 0x0d, 0x50, 0x89, 0x12, 0xcf, 0xd9, 0x56, 0x57, 0xaa, 0xcf, 0x73, 0x57,
	0x2e, 0x89, 0xfc, 0xa0, 0x7f, 0x6c, 0xb0, 0xfd, 0x8c, 0x4e, 0x58, 0xf1, 0x54, 0x76, 0x4a, 0x1a,
	0x54, 0xfb, 0x77, 0xca, 0xf6, 0xab, 0xb6, 0x1f, 0x3e, 0xdf, 0xf6, 0xd7, 0x17, 0xb9, 0x7b, 0xab,
	0x1c, 0xf9, 0x84, 0x9d, 0x67, 0x3c, 0x91, 0x93, 0x56, 0x50, 0xf0, 0x70, 0x0d, 0x05, 0x1b, 0x37,
	0xad, 0x70, 0x71, 0xf8, 0x3c, 0x17, 0x2f, 0xad, 0x24, 0x77, 0xec, 0x5f, 0xe7, 0x65, 0xc9, 0xc5,
	0xf1, 0x1a, 0x2e, 0xf6, 0x16, 0xb9, 0xbb, 0x5b, 0x26, 0x93, 0x2f, 0xf4, 0x10, 0xad, 0x32, 0x72,
	0xbc, 0x86, 0x91, 0x0d, 0x9b, 0x4a, 0x5e, 0xee, 0xbe, 0xc8, 0xcb, 0x2a, 0x0f, 0xbb, 0x2b, 0x3c,
	0xe8, 0xf6, 0x3f, 0x05, 0x0d, 0xd9, 0x7d, 0xf5, 0x08, 0xcb, 0xe3, 0x5b, 0xd7, 0x8e, 0x0f, 0xc1,
	0x96, 0x47, 0x05, 0x35, 0x24, 0x28, 0x5b, 0x66, 0x1a, 0xa7, 0xbe, 0xa6, 0x80, 0x48, 0x13, 0xc5,
	0x00, 0x3c, 0x66, 0x41, 0x41, 0xe3, 0xd1, 0xca, 0x6b, 0x7a, 0x73, 0x91, 0xbb, 0x77, 0xb5, 0x0e,
	0x70, 0x6f, 0x55, 0x9e, 0xca, 0x0e, 0x4a, 0xa6, 0x31, 0x68, 0xc4, 0x67, 0x97, 0x29, 0x1f, 0xd2,
	0x40, 0x95, 0xba, 0x26, 0x20, 0x45, 0x44, 0x8a, 0x98, 0x31, 0x1f, 0xfc, 0xba, 0x05, 0xea, 0x5f,
	0xb2, 0x81, 0x2c, 0x09, 0x1f, 0x82, 0xad, 0xcf, 0x78, 0xe8, 0xc3, 0xfd, 0x9e, 0x16, 0xe5, 0x5e,
	0xa1, 0xd8, 0xbd, 0x27, 0x52, 0xb1, 0x5b, 0x1b, 0xfc, 0xf0, 0x17, 0x4b, 0xab, 0xd0, 0x27, 0x3c,
	0x15, 0xf0, 0xf6, 0x26, 0x81, 0x21, 0xec, 0xbc, 0x75, 0x67, 0x73, 0x30, 0x8d, 0xd1, 0xd9, 0xf7,
	0x7f, 0xfc, 0xfd, 0xa3, 0x3d, 0x80, 0x5f, 0x61, 0x83, 0xc2, 0x52, 0x77, 0xc2, 0x6c, 0x8c, 0xa7,
	0x46, 0xbd, 0x67, 0xca, 0x23, 0x95, 0x47, 0xbb, 0xa4, 0x0e, 0xcf, 0xb0, 0x16, 0x59, 0x3c, 0xd5,
	0xff, 0x19, 0x56, 0x5a, 0x8a, 0xa7, 0xea, 0x37, 0xc3, 0x85, 0x56, 0xe2, 0x69, 0x61, 0xcd, 0xa0,
	0x0f, 0xc0, 0x87, 0x6a, 0x48, 0xd4, 0xbd, 0xdd, 0x75, 0xa7, 0x5a, 0x79, 0x4f, 0xeb, 0x8f, 0x5d,
	0x50, 0x8e, 0x5a, 0xea, 0xd8, 0x7b, 0xe8, 0xe6, 0xf2, 0xd8, 0x7a, 0x00, 0x4f, 0xac, 0xf7, 0x64,
	0xa1, 0xcf, 0xd5, 0x60, 0xfd, 0x3f, 0x85, 0xf4, 0xd0, 0xca, 0x42, 0xdf, 0xa9, 0xc9, 0x61, 0xa6,
	0xd0, 0x5a, 0x95, 0x2f, 0x27, 0xeb, 0x3f, 0xea, 0x1c, 0xab, 0x3a, 0x07, 0xe8, 0xde, 0xb2, 0x8e,
	0x9e, 0x7e, 0xcc, 0x3d, 0x3c, 0xe5, 0xde, 0x0c, 0x17, 0xd3, 0x83, 0xa7, 0x85, 0x35, 0xeb, 0xef,
	0xfe, 0x76, 0xd5, 0xb6, 0x7e, 0xbf, 0x6a, 0x5b, 0x7f, 0x5e, 0xb5, 0xad, 0x9f, 0xfe, 0x6a, 0xbf,
	0x32, 0xa8, 0xa9, 0x31, 0x39, 0xfe, 0x37, 0x00, 0x00, 0xff, 0xff, 0x73, 0x12, 0xa3, 0x9e, 0x52,
	0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebInfoClient is the client API for WebInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebInfoClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	InfoList(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error)
	CreateInfo(ctx context.Context, in *SaveInfoReq, opts ...grpc.CallOption) (*SaveResp, error)
	UpdateInfo(ctx context.Context, in *SaveInfoReq, opts ...grpc.CallOption) (*SaveResp, error)
	DeleteInfo(ctx context.Context, in *DelInfoReq, opts ...grpc.CallOption) (*SaveResp, error)
}

type webInfoClient struct {
	cc *grpc.ClientConn
}

func NewWebInfoClient(cc *grpc.ClientConn) WebInfoClient {
	return &webInfoClient{cc}
}

func (c *webInfoClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/webinfo.service.v1.WebInfo/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webInfoClient) InfoList(ctx context.Context, in *InfoReq, opts ...grpc.CallOption) (*InfoResp, error) {
	out := new(InfoResp)
	err := c.cc.Invoke(ctx, "/webinfo.service.v1.WebInfo/InfoList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webInfoClient) CreateInfo(ctx context.Context, in *SaveInfoReq, opts ...grpc.CallOption) (*SaveResp, error) {
	out := new(SaveResp)
	err := c.cc.Invoke(ctx, "/webinfo.service.v1.WebInfo/CreateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webInfoClient) UpdateInfo(ctx context.Context, in *SaveInfoReq, opts ...grpc.CallOption) (*SaveResp, error) {
	out := new(SaveResp)
	err := c.cc.Invoke(ctx, "/webinfo.service.v1.WebInfo/UpdateInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webInfoClient) DeleteInfo(ctx context.Context, in *DelInfoReq, opts ...grpc.CallOption) (*SaveResp, error) {
	out := new(SaveResp)
	err := c.cc.Invoke(ctx, "/webinfo.service.v1.WebInfo/DeleteInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebInfoServer is the server API for WebInfo service.
type WebInfoServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	InfoList(context.Context, *InfoReq) (*InfoResp, error)
	CreateInfo(context.Context, *SaveInfoReq) (*SaveResp, error)
	UpdateInfo(context.Context, *SaveInfoReq) (*SaveResp, error)
	DeleteInfo(context.Context, *DelInfoReq) (*SaveResp, error)
}

// UnimplementedWebInfoServer can be embedded to have forward compatible implementations.
type UnimplementedWebInfoServer struct {
}

func (*UnimplementedWebInfoServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedWebInfoServer) InfoList(ctx context.Context, req *InfoReq) (*InfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoList not implemented")
}
func (*UnimplementedWebInfoServer) CreateInfo(ctx context.Context, req *SaveInfoReq) (*SaveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInfo not implemented")
}
func (*UnimplementedWebInfoServer) UpdateInfo(ctx context.Context, req *SaveInfoReq) (*SaveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateInfo not implemented")
}
func (*UnimplementedWebInfoServer) DeleteInfo(ctx context.Context, req *DelInfoReq) (*SaveResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInfo not implemented")
}

func RegisterWebInfoServer(s *grpc.Server, srv WebInfoServer) {
	s.RegisterService(&_WebInfo_serviceDesc, srv)
}

func _WebInfo_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebInfoServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webinfo.service.v1.WebInfo/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebInfoServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebInfo_InfoList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebInfoServer).InfoList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webinfo.service.v1.WebInfo/InfoList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebInfoServer).InfoList(ctx, req.(*InfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebInfo_CreateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebInfoServer).CreateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webinfo.service.v1.WebInfo/CreateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebInfoServer).CreateInfo(ctx, req.(*SaveInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebInfo_UpdateInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebInfoServer).UpdateInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webinfo.service.v1.WebInfo/UpdateInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebInfoServer).UpdateInfo(ctx, req.(*SaveInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebInfo_DeleteInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebInfoServer).DeleteInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webinfo.service.v1.WebInfo/DeleteInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebInfoServer).DeleteInfo(ctx, req.(*DelInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebInfo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "webinfo.service.v1.WebInfo",
	HandlerType: (*WebInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _WebInfo_Ping_Handler,
		},
		{
			MethodName: "InfoList",
			Handler:    _WebInfo_InfoList_Handler,
		},
		{
			MethodName: "CreateInfo",
			Handler:    _WebInfo_CreateInfo_Handler,
		},
		{
			MethodName: "UpdateInfo",
			Handler:    _WebInfo_UpdateInfo_Handler,
		},
		{
			MethodName: "DeleteInfo",
			Handler:    _WebInfo_DeleteInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "webinfo.proto",
}

func (m *InfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Unscoped {
		i--
		if m.Unscoped {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Order) > 0 {
		i -= len(m.Order)
		copy(dAtA[i:], m.Order)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.Order)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.PageNum != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.PageNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Size_ != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Lists) > 0 {
		for iNdEx := len(m.Lists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWebinfo(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *InfoDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InfoDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InfoDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ord) > 0 {
		i -= len(m.Ord)
		copy(dAtA[i:], m.Ord)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.Ord)))
		i--
		dAtA[i] = 0x5a
	}
	if m.DeletedAt != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x48
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedAt != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.WebVal) > 0 {
		i -= len(m.WebVal)
		copy(dAtA[i:], m.WebVal)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.WebVal)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UniqueVal) > 0 {
		i -= len(m.UniqueVal)
		copy(dAtA[i:], m.UniqueVal)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.UniqueVal)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WebKey) > 0 {
		i -= len(m.WebKey)
		copy(dAtA[i:], m.WebKey)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.WebKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sn) > 0 {
		i -= len(m.Sn)
		copy(dAtA[i:], m.Sn)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.Sn)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaveInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Ord) > 0 {
		i -= len(m.Ord)
		copy(dAtA[i:], m.Ord)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.Ord)))
		i--
		dAtA[i] = 0x5a
	}
	if m.DeletedAt != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x48
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x40
	}
	if m.CreatedAt != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x38
	}
	if m.Status != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x30
	}
	if len(m.WebVal) > 0 {
		i -= len(m.WebVal)
		copy(dAtA[i:], m.WebVal)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.WebVal)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.UniqueVal) > 0 {
		i -= len(m.UniqueVal)
		copy(dAtA[i:], m.UniqueVal)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.UniqueVal)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WebKey) > 0 {
		i -= len(m.WebKey)
		copy(dAtA[i:], m.WebKey)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.WebKey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Sn) > 0 {
		i -= len(m.Sn)
		copy(dAtA[i:], m.Sn)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.Sn)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SaveResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SaveResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SaveResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintWebinfo(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DelInfoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelInfoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DelInfoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Physical {
		i--
		if m.Physical {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintWebinfo(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWebinfo(dAtA []byte, offset int, v uint64) int {
	offset -= sovWebinfo(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageNum != 0 {
		n += 1 + sovWebinfo(uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		n += 1 + sovWebinfo(uint64(m.PageSize))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	l = len(m.Order)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	if m.Unscoped {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovWebinfo(uint64(m.Total))
	}
	if len(m.Lists) > 0 {
		for _, e := range m.Lists {
			l = e.Size()
			n += 1 + l + sovWebinfo(uint64(l))
		}
	}
	if m.Page != 0 {
		n += 1 + sovWebinfo(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovWebinfo(uint64(m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *InfoDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWebinfo(uint64(m.Id))
	}
	l = len(m.Sn)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	l = len(m.WebKey)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	l = len(m.UniqueVal)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	l = len(m.WebVal)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovWebinfo(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovWebinfo(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovWebinfo(uint64(m.UpdatedAt))
	}
	if m.DeletedAt != 0 {
		n += 1 + sovWebinfo(uint64(m.DeletedAt))
	}
	l = len(m.Ord)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWebinfo(uint64(m.Id))
	}
	l = len(m.Sn)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	l = len(m.WebKey)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	l = len(m.UniqueVal)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	l = len(m.WebVal)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovWebinfo(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovWebinfo(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovWebinfo(uint64(m.UpdatedAt))
	}
	if m.DeletedAt != 0 {
		n += 1 + sovWebinfo(uint64(m.DeletedAt))
	}
	l = len(m.Ord)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SaveResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovWebinfo(uint64(m.Status))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovWebinfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DelInfoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovWebinfo(uint64(m.Id))
	}
	if m.Physical {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWebinfo(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWebinfo(x uint64) (n int) {
	return sovWebinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Order = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Unscoped", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Unscoped = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWebinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lists = append(m.Lists, &InfoDetail{})
			if err := m.Lists[len(m.Lists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InfoDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InfoDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InfoDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ord = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebVal", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebVal = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ord", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ord = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SaveResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SaveResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SaveResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelInfoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelInfoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelInfoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Physical", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Physical = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWebinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWebinfo
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupWebinfo
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthWebinfo
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthWebinfo        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebinfo          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupWebinfo = fmt.Errorf("proto: unexpected end of group")
)
