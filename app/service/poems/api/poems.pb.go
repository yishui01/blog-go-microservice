// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: poems.proto

package poems_service_v1

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PoReq struct {
	PageNum              int64    `protobuf:"varint,1,opt,name=pageNum,proto3" json:"pageNum,omitempty" form:"pageNum" validate:"numeric,min=1"`
	PageSize             int32    `protobuf:"varint,2,opt,name=pageSize,proto3" json:"pageSize,omitempty" form:"pageSize" validate:"numeric,min=1"`
	Filter               string   `protobuf:"bytes,3,opt,name=filter,proto3" json:"filter,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PoReq) Reset()         { *m = PoReq{} }
func (m *PoReq) String() string { return proto.CompactTextString(m) }
func (*PoReq) ProtoMessage()    {}
func (*PoReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_1893a974a2be75ae, []int{0}
}
func (m *PoReq) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoReq.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoReq.Merge(m, src)
}
func (m *PoReq) XXX_Size() int {
	return m.Size()
}
func (m *PoReq) XXX_DiscardUnknown() {
	xxx_messageInfo_PoReq.DiscardUnknown(m)
}

var xxx_messageInfo_PoReq proto.InternalMessageInfo

func (m *PoReq) GetPageNum() int64 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *PoReq) GetPageSize() int32 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *PoReq) GetFilter() string {
	if m != nil {
		return m.Filter
	}
	return ""
}

type PoResp struct {
	Total                int64       `protobuf:"varint,1,opt,name=total,proto3" json:"total,omitempty"`
	Lists                []*PoDetail `protobuf:"bytes,2,rep,name=lists,proto3" json:"lists,omitempty"`
	Page                 int64       `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Size_                int32       `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *PoResp) Reset()         { *m = PoResp{} }
func (m *PoResp) String() string { return proto.CompactTextString(m) }
func (*PoResp) ProtoMessage()    {}
func (*PoResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_1893a974a2be75ae, []int{1}
}
func (m *PoResp) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoResp.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoResp.Merge(m, src)
}
func (m *PoResp) XXX_Size() int {
	return m.Size()
}
func (m *PoResp) XXX_DiscardUnknown() {
	xxx_messageInfo_PoResp.DiscardUnknown(m)
}

var xxx_messageInfo_PoResp proto.InternalMessageInfo

func (m *PoResp) GetTotal() int64 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *PoResp) GetLists() []*PoDetail {
	if m != nil {
		return m.Lists
	}
	return nil
}

func (m *PoResp) GetPage() int64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *PoResp) GetSize_() int32 {
	if m != nil {
		return m.Size_
	}
	return 0
}

type PoDetail struct {
	Id                   int64    `protobuf:"varint,1,opt,name=Id,proto3" json:"id"`
	Cate                 string   `protobuf:"bytes,2,opt,name=Cate,proto3" json:"cate"`
	Title                string   `protobuf:"bytes,3,opt,name=Title,proto3" json:"title"`
	Author               string   `protobuf:"bytes,4,opt,name=Author,proto3" json:"author"`
	Content              string   `protobuf:"bytes,5,opt,name=Content,proto3" json:"content"`
	Chapter              string   `protobuf:"bytes,6,opt,name=Chapter,proto3" json:"chapter"`
	Paragraphs           string   `protobuf:"bytes,7,opt,name=Paragraphs,proto3" json:"paragraphs"`
	Notes                string   `protobuf:"bytes,8,opt,name=Notes,proto3" json:"notes"`
	Rhythmic             string   `protobuf:"bytes,9,opt,name=Rhythmic,proto3" json:"rhythmic"`
	Section              string   `protobuf:"bytes,10,opt,name=Section,proto3" json:"section"`
	Comment              string   `protobuf:"bytes,11,opt,name=Comment,proto3" json:"comment"`
	Sn                   string   `protobuf:"bytes,12,opt,name=Sn,proto3" json:"sn"`
	CreateTime           string   `protobuf:"bytes,13,opt,name=CreateTime,proto3" json:"create_time"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PoDetail) Reset()         { *m = PoDetail{} }
func (m *PoDetail) String() string { return proto.CompactTextString(m) }
func (*PoDetail) ProtoMessage()    {}
func (*PoDetail) Descriptor() ([]byte, []int) {
	return fileDescriptor_1893a974a2be75ae, []int{2}
}
func (m *PoDetail) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoDetail) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoDetail.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoDetail) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoDetail.Merge(m, src)
}
func (m *PoDetail) XXX_Size() int {
	return m.Size()
}
func (m *PoDetail) XXX_DiscardUnknown() {
	xxx_messageInfo_PoDetail.DiscardUnknown(m)
}

var xxx_messageInfo_PoDetail proto.InternalMessageInfo

func (m *PoDetail) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PoDetail) GetCate() string {
	if m != nil {
		return m.Cate
	}
	return ""
}

func (m *PoDetail) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *PoDetail) GetAuthor() string {
	if m != nil {
		return m.Author
	}
	return ""
}

func (m *PoDetail) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *PoDetail) GetChapter() string {
	if m != nil {
		return m.Chapter
	}
	return ""
}

func (m *PoDetail) GetParagraphs() string {
	if m != nil {
		return m.Paragraphs
	}
	return ""
}

func (m *PoDetail) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *PoDetail) GetRhythmic() string {
	if m != nil {
		return m.Rhythmic
	}
	return ""
}

func (m *PoDetail) GetSection() string {
	if m != nil {
		return m.Section
	}
	return ""
}

func (m *PoDetail) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *PoDetail) GetSn() string {
	if m != nil {
		return m.Sn
	}
	return ""
}

func (m *PoDetail) GetCreateTime() string {
	if m != nil {
		return m.CreateTime
	}
	return ""
}

func init() {
	proto.RegisterType((*PoReq)(nil), "poems.service.v1.PoReq")
	proto.RegisterType((*PoResp)(nil), "poems.service.v1.PoResp")
	proto.RegisterType((*PoDetail)(nil), "poems.service.v1.PoDetail")
}

func init() { proto.RegisterFile("poems.proto", fileDescriptor_1893a974a2be75ae) }

var fileDescriptor_1893a974a2be75ae = []byte{
	// 669 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x41, 0x6f, 0xd3, 0x3c,
	0x18, 0xc7, 0xdf, 0xb4, 0x4d, 0xda, 0xba, 0x7b, 0x61, 0xb2, 0xd0, 0x88, 0xca, 0xd4, 0x54, 0x91,
	0x10, 0x95, 0x18, 0x09, 0x1b, 0x12, 0x87, 0x09, 0x90, 0xe8, 0x36, 0x89, 0x5d, 0xa6, 0xca, 0xdd,
	0x1d, 0x79, 0xa9, 0x97, 0x58, 0x8a, 0xe3, 0x2c, 0x71, 0x27, 0xc6, 0xb4, 0x03, 0x7c, 0x05, 0x2e,
	0x7c, 0x0c, 0xbe, 0x03, 0x17, 0x8e, 0x48, 0xdc, 0x23, 0x34, 0xe0, 0x92, 0xe3, 0x3e, 0x01, 0xb2,
	0x9d, 0xac, 0x15, 0x1a, 0x9c, 0xe2, 0xe7, 0xf7, 0xff, 0xdb, 0xcf, 0xf3, 0x38, 0x7e, 0x40, 0x2f,
	0xe5, 0x84, 0xe5, 0x5e, 0x9a, 0x71, 0xc1, 0xe1, 0xaa, 0x0e, 0x72, 0x92, 0x9d, 0xd2, 0x80, 0x78,
	0xa7, 0x9b, 0xfd, 0x47, 0x21, 0x15, 0xd1, 0xfc, 0xc8, 0x0b, 0x38, 0xf3, 0x43, 0x1e, 0x72, 0x5f,
	0x19, 0x8f, 0xe6, 0xc7, 0x2a, 0x52, 0x81, 0x5a, 0xe9, 0x03, 0xfa, 0xf7, 0x42, 0xce, 0xc3, 0x98,
	0x2c, 0x5c, 0x84, 0xa5, 0xe2, 0xac, 0x12, 0xd7, 0x2b, 0x11, 0xa7, 0xd4, 0xc7, 0x49, 0xc2, 0x05,
	0x16, 0x94, 0x27, 0x55, 0x6e, 0xf7, 0x93, 0x01, 0xcc, 0x09, 0x47, 0xe4, 0x04, 0xee, 0x81, 0x76,
	0x8a, 0x43, 0x72, 0x30, 0x67, 0xb6, 0x31, 0x34, 0x46, 0xcd, 0xf1, 0xc3, 0xab, 0xc2, 0x79, 0x70,
	0xcc, 0x33, 0xb6, 0xed, 0x56, 0x82, 0x3b, 0x3c, 0xc5, 0x31, 0x9d, 0x61, 0x41, 0xb6, 0xdd, 0x64,
	0xce, 0x48, 0x46, 0x83, 0x0d, 0x46, 0x93, 0xe7, 0x9b, 0x2e, 0xaa, 0xf7, 0xc2, 0x57, 0xa0, 0x23,
	0x97, 0x53, 0xfa, 0x96, 0xd8, 0x8d, 0xa1, 0x31, 0x32, 0xc7, 0x1b, 0x57, 0x85, 0x33, 0x5a, 0x9c,
	0x23, 0x95, 0x7f, 0x1c, 0x74, 0xbd, 0x1b, 0xae, 0x01, 0xeb, 0x98, 0xc6, 0x82, 0x64, 0x76, 0x73,
	0x68, 0x8c, 0xba, 0xa8, 0x8a, 0xdc, 0x37, 0xc0, 0x92, 0x15, 0xe7, 0x29, 0xbc, 0x03, 0x4c, 0xc1,
	0x05, 0x8e, 0x75, 0xc1, 0x48, 0x07, 0xf0, 0x31, 0x30, 0x63, 0x9a, 0x8b, 0xdc, 0x6e, 0x0c, 0x9b,
	0xa3, 0xde, 0x56, 0xdf, 0xfb, 0xf3, 0x7a, 0xbd, 0x09, 0xdf, 0x25, 0x02, 0xd3, 0x18, 0x69, 0x23,
	0x84, 0xa0, 0x25, 0xb3, 0xaa, 0x3c, 0x4d, 0xa4, 0xd6, 0x92, 0xe5, 0xb2, 0x87, 0x96, 0xec, 0x01,
	0xa9, 0xb5, 0xfb, 0xab, 0x09, 0x3a, 0xf5, 0x5e, 0xb8, 0x06, 0x1a, 0xfb, 0xb3, 0xea, 0xaa, 0xac,
	0xb2, 0x70, 0x1a, 0x74, 0x86, 0x1a, 0xfb, 0x33, 0xb8, 0x0e, 0x5a, 0x3b, 0x58, 0xe8, 0xe6, 0xbb,
	0xe3, 0x4e, 0x59, 0x38, 0xad, 0x00, 0x0b, 0x82, 0x14, 0x85, 0x0e, 0x30, 0x0f, 0xa9, 0x88, 0x75,
	0xae, 0xee, 0xb8, 0x5b, 0x16, 0x8e, 0x29, 0x24, 0x40, 0x9a, 0x43, 0x17, 0x58, 0x2f, 0xe7, 0x22,
	0xe2, 0x99, 0xca, 0xdc, 0x1d, 0x83, 0xb2, 0x70, 0x2c, 0xac, 0x08, 0xaa, 0x14, 0x78, 0x1f, 0xb4,
	0x77, 0x78, 0x22, 0x48, 0x22, 0x6c, 0x53, 0x99, 0x7a, 0x65, 0xe1, 0xb4, 0x03, 0x8d, 0x50, 0xad,
	0x29, 0x5b, 0x84, 0x53, 0x79, 0x83, 0xd6, 0x92, 0x4d, 0x23, 0x54, 0x6b, 0xd0, 0x03, 0x60, 0x82,
	0x33, 0x1c, 0x66, 0x38, 0x8d, 0x72, 0xbb, 0xad, 0x9c, 0xb7, 0xca, 0xc2, 0x01, 0xe9, 0x35, 0x45,
	0x4b, 0x0e, 0xd9, 0xc2, 0x01, 0x17, 0x24, 0xb7, 0x3b, 0x8b, 0x16, 0x12, 0x09, 0x90, 0xe6, 0x70,
	0x04, 0x3a, 0x28, 0x3a, 0x13, 0x11, 0xa3, 0x81, 0xdd, 0x55, 0x9e, 0x95, 0xb2, 0x70, 0x3a, 0x59,
	0xc5, 0xd0, 0xb5, 0x2a, 0x2b, 0x9c, 0x92, 0x40, 0xbe, 0x47, 0x1b, 0x2c, 0x2a, 0xcc, 0x35, 0x42,
	0xb5, 0xa6, 0xfb, 0x65, 0x4c, 0xf6, 0xdb, 0x5b, 0xee, 0x57, 0x21, 0x54, 0x6b, 0xf2, 0x8f, 0x4c,
	0x13, 0x7b, 0x45, 0x39, 0xd4, 0x1f, 0xc9, 0x13, 0xd4, 0x98, 0x26, 0xd0, 0x07, 0x60, 0x27, 0x23,
	0x58, 0x90, 0x43, 0xca, 0x88, 0xfd, 0xbf, 0xd2, 0x6f, 0x97, 0x85, 0xd3, 0x0b, 0x14, 0x7d, 0x2d,
	0x28, 0x23, 0x68, 0xc9, 0xb2, 0xf5, 0x59, 0x0d, 0x05, 0x61, 0x39, 0x7c, 0x0a, 0x5a, 0x13, 0x9a,
	0x84, 0x70, 0xcd, 0xd3, 0x53, 0xe4, 0xd5, 0x23, 0xe6, 0xed, 0xc9, 0x11, 0xeb, 0xff, 0x85, 0xc3,
	0x77, 0x06, 0xb0, 0xa6, 0x04, 0x67, 0x41, 0x04, 0xef, 0xde, 0xf4, 0xfe, 0x10, 0x39, 0xe9, 0xdb,
	0x37, 0x0b, 0x79, 0xea, 0xee, 0xbe, 0xff, 0xf6, 0xf3, 0x43, 0xe3, 0x05, 0x7c, 0xe6, 0x2b, 0x87,
	0x2f, 0x1f, 0x64, 0x32, 0x67, 0xfe, 0x79, 0x35, 0x64, 0x17, 0x8a, 0xc8, 0x27, 0xa9, 0x91, 0x1c,
	0x97, 0x0b, 0x5f, 0x8f, 0x87, 0x7f, 0xae, 0xbf, 0x17, 0xe3, 0xd5, 0x2f, 0x97, 0x03, 0xe3, 0xeb,
	0xe5, 0xc0, 0xf8, 0x7e, 0x39, 0x30, 0x3e, 0xfe, 0x18, 0xfc, 0x77, 0x64, 0xa9, 0x2a, 0x9f, 0xfc,
	0x0e, 0x00, 0x00, 0xff, 0xff, 0x06, 0x3a, 0xb0, 0xbb, 0x7e, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PoemsClient is the client API for Poems service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PoemsClient interface {
	Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	Search(ctx context.Context, in *PoReq, opts ...grpc.CallOption) (*PoResp, error)
}

type poemsClient struct {
	cc *grpc.ClientConn
}

func NewPoemsClient(cc *grpc.ClientConn) PoemsClient {
	return &poemsClient{cc}
}

func (c *poemsClient) Ping(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/poems.service.v1.Poems/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *poemsClient) Search(ctx context.Context, in *PoReq, opts ...grpc.CallOption) (*PoResp, error) {
	out := new(PoResp)
	err := c.cc.Invoke(ctx, "/poems.service.v1.Poems/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PoemsServer is the server API for Poems service.
type PoemsServer interface {
	Ping(context.Context, *empty.Empty) (*empty.Empty, error)
	Search(context.Context, *PoReq) (*PoResp, error)
}

// UnimplementedPoemsServer can be embedded to have forward compatible implementations.
type UnimplementedPoemsServer struct {
}

func (*UnimplementedPoemsServer) Ping(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (*UnimplementedPoemsServer) Search(ctx context.Context, req *PoReq) (*PoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}

func RegisterPoemsServer(s *grpc.Server, srv PoemsServer) {
	s.RegisterService(&_Poems_serviceDesc, srv)
}

func _Poems_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemsServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poems.service.v1.Poems/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemsServer).Ping(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Poems_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PoemsServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/poems.service.v1.Poems/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PoemsServer).Search(ctx, req.(*PoReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Poems_serviceDesc = grpc.ServiceDesc{
	ServiceName: "poems.service.v1.Poems",
	HandlerType: (*PoemsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Poems_Ping_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _Poems_Search_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "poems.proto",
}

func (m *PoReq) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoReq) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoReq) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = encodeVarintPoems(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PageSize != 0 {
		i = encodeVarintPoems(dAtA, i, uint64(m.PageSize))
		i--
		dAtA[i] = 0x10
	}
	if m.PageNum != 0 {
		i = encodeVarintPoems(dAtA, i, uint64(m.PageNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoResp) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoResp) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoResp) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Size_ != 0 {
		i = encodeVarintPoems(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintPoems(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Lists) > 0 {
		for iNdEx := len(m.Lists) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lists[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPoems(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Total != 0 {
		i = encodeVarintPoems(dAtA, i, uint64(m.Total))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoDetail) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoDetail) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoDetail) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.CreateTime) > 0 {
		i -= len(m.CreateTime)
		copy(dAtA[i:], m.CreateTime)
		i = encodeVarintPoems(dAtA, i, uint64(len(m.CreateTime)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.Sn) > 0 {
		i -= len(m.Sn)
		copy(dAtA[i:], m.Sn)
		i = encodeVarintPoems(dAtA, i, uint64(len(m.Sn)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintPoems(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Section) > 0 {
		i -= len(m.Section)
		copy(dAtA[i:], m.Section)
		i = encodeVarintPoems(dAtA, i, uint64(len(m.Section)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Rhythmic) > 0 {
		i -= len(m.Rhythmic)
		copy(dAtA[i:], m.Rhythmic)
		i = encodeVarintPoems(dAtA, i, uint64(len(m.Rhythmic)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Notes) > 0 {
		i -= len(m.Notes)
		copy(dAtA[i:], m.Notes)
		i = encodeVarintPoems(dAtA, i, uint64(len(m.Notes)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Paragraphs) > 0 {
		i -= len(m.Paragraphs)
		copy(dAtA[i:], m.Paragraphs)
		i = encodeVarintPoems(dAtA, i, uint64(len(m.Paragraphs)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Chapter) > 0 {
		i -= len(m.Chapter)
		copy(dAtA[i:], m.Chapter)
		i = encodeVarintPoems(dAtA, i, uint64(len(m.Chapter)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintPoems(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Author) > 0 {
		i -= len(m.Author)
		copy(dAtA[i:], m.Author)
		i = encodeVarintPoems(dAtA, i, uint64(len(m.Author)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintPoems(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Cate) > 0 {
		i -= len(m.Cate)
		copy(dAtA[i:], m.Cate)
		i = encodeVarintPoems(dAtA, i, uint64(len(m.Cate)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintPoems(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintPoems(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoems(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoReq) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PageNum != 0 {
		n += 1 + sovPoems(uint64(m.PageNum))
	}
	if m.PageSize != 0 {
		n += 1 + sovPoems(uint64(m.PageSize))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + sovPoems(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PoResp) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Total != 0 {
		n += 1 + sovPoems(uint64(m.Total))
	}
	if len(m.Lists) > 0 {
		for _, e := range m.Lists {
			l = e.Size()
			n += 1 + l + sovPoems(uint64(l))
		}
	}
	if m.Page != 0 {
		n += 1 + sovPoems(uint64(m.Page))
	}
	if m.Size_ != 0 {
		n += 1 + sovPoems(uint64(m.Size_))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PoDetail) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovPoems(uint64(m.Id))
	}
	l = len(m.Cate)
	if l > 0 {
		n += 1 + l + sovPoems(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovPoems(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovPoems(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovPoems(uint64(l))
	}
	l = len(m.Chapter)
	if l > 0 {
		n += 1 + l + sovPoems(uint64(l))
	}
	l = len(m.Paragraphs)
	if l > 0 {
		n += 1 + l + sovPoems(uint64(l))
	}
	l = len(m.Notes)
	if l > 0 {
		n += 1 + l + sovPoems(uint64(l))
	}
	l = len(m.Rhythmic)
	if l > 0 {
		n += 1 + l + sovPoems(uint64(l))
	}
	l = len(m.Section)
	if l > 0 {
		n += 1 + l + sovPoems(uint64(l))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovPoems(uint64(l))
	}
	l = len(m.Sn)
	if l > 0 {
		n += 1 + l + sovPoems(uint64(l))
	}
	l = len(m.CreateTime)
	if l > 0 {
		n += 1 + l + sovPoems(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPoems(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoems(x uint64) (n int) {
	return sovPoems(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoReq) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoems
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoReq: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoReq: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoems(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoems
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoems
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoResp) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoems
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoResp: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoResp: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lists", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lists = append(m.Lists, &PoDetail{})
			if err := m.Lists[len(m.Lists)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPoems(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoems
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoems
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoDetail) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoems
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoDetail: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoDetail: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chapter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chapter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paragraphs", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Paragraphs = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Notes", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Notes = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rhythmic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rhythmic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Section", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Section = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreateTime", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoems
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoems
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreateTime = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoems(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPoems
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPoems
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoems(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoems
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoems
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoems
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoems
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoems
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoems        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoems          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoems = fmt.Errorf("proto: unexpected end of group")
)
